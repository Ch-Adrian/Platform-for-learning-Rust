{"cargoToml":"[package]\nname \u003d \"main\"\nversion \u003d \"0.1.0\"\nedition \u003d \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]","pages":[{"sections":[{"title":"Pierwszy program w Rust","cells":[{"type":"TextCell","value":"## Zad. 1.\nWykonaj swój pierwszy program w j?zyku Rust:"},{"type":"CodeCell","value":"fn main() {\n\tprintln!(\"hello world\");\n}"},{"tiles":[{"id":1,"text":"Jeden Kafelek"},{"id":2,"text":"Drugi Kafelek"},{"id":3,"text":"Trzeci Kaflek"}],"type":"TilesCell","value":"To jest komórka typu kafelki!"}]},{"title":"Funkcje","cells":[{"type":"TextCell","value":"## Zad. 2. Polecenie:\nUzupe?nij tak funkcj? add_two, ?eby dodawa?a 2 do swojego argumentu i zwraca?a wynik."},{"test":"#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn it_adds_two() {\r\n        assert_eq!(3, add_two(1));\r\n    }\r\n}","reference":"pub fn add_two(a: i32) -\u003e i32 {\r\n    a + 2\r\n}","type":"CodeCell","value":"pub fn add_two(a: i32) -\u003e i32 {\r\n    a + 2\r\n}\r\n\r\nfn main(){\r\n    println!(\"Result: {}\", add_two(1));\r\n}"}]}]},{"sections":[{"title":"Ownership","cells":[{"mutableString":"/*TO_FILL*/","template":"fn main() {\r\n    let s1 \u003d String::from(\"hello\");\r\n\r\n    let len \u003d calculate_length(/*TO_FILL*/);\r\n\r\n    println!(\"The length of \u0027{}\u0027 is {}.\", s1, len);\r\n}\r\n\r\nfn calculate_length(s: \u0026String) -\u003e usize {\r\n    s.len()\r\n}","reference":"fn main() {\r\n    let s1 \u003d String::from(\"hello\");\r\n\r\n    let len \u003d calculate_length(\u0026s1);\r\n\r\n    println!(\"The length of \u0027{}\u0027 is {}.\", s1, len);\r\n}\r\n\r\nfn calculate_length(s: \u0026String) -\u003e usize {\r\n    s.len()\r\n}","type":"ImmutableCodeCell","value":"fn main() {\r\n    let s1 \u003d String::from(\"hello\");\r\n\r\n    let len \u003d calculate_length(/*TO_FILL*/);\r\n\r\n    println!(\"The length of \u0027{}\u0027 is {}.\", s1, len);\r\n}\r\n\r\nfn calculate_length(s: \u0026String) -\u003e usize {\r\n    s.len()\r\n}"}]}]},{"sections":[{"title":"Data types","cells":[{"options":[{"id":0,"text":"u8","valid":true},{"id":1,"text":"std::nullptr_t ","valid":false},{"id":2,"text":"char32_t","valid":false},{"id":3,"text":"i128","valid":true}],"type":"QuizCell","value":"## Zad. 4. Polecenie :\nKtóre typy s? obecne w j?zyku Rust?"}]}]}]}